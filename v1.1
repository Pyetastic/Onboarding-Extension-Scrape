from __future__ import print_function
from apiclient.discovery import build
from bs4 import BeautifulSoup
import base64
import email
from apiclient import errors
from httplib2 import Http
from oauth2client import file, client, tools
import gspread #Imports Google Sheets API
from oauth2client.service_account import  ServiceAccountCredentials
import pprint # Get PPrint in
import datetime
scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive'] # the locations in which we can locate the our loin ariea
creds = ServiceAccountCredentials.from_json_keyfile_name('LICred.json',scope) #Secure deets location
client = gspread.authorize(creds) #logs into Google sheet
pp = pprint.PrettyPrinter() # Calls pretty print fuction and saves it as pp for ease
sheet = client.open('Paser sheet').sheet1 #Save the sheet form the leaver doc
"""
Gamil API accessing extention  folders inside of my mailbox. 
"""
# Setup the Gmail API
SCOPES = 'https://www.googleapis.com/auth/gmail.readonly'
store = file.Storage('credentials.json')
creds = store.get()
if not creds or creds.invalid:
    flow = client.flow_from_clientsecrets('client_secret.json', SCOPES)
    creds = tools.run_flow(flow, store)
service = build('gmail', 'v1', http=creds.authorize(Http()))
x =0 #export email index

#Sets all veriables to null
Empno = "-"
Empnam = "-"
Ldate = "-"
Depar ="-"
Empgro = "-"
EDate = "-"
Eset = "-"
Econt = "-"
def FENo(line) : #Breaks up employee number
    if line.find("Contractor number:") !=-1:
        global Empno
        enumber = line.split(":")
        enumber = enumber[1].split('"')
        enumber = enumber[0].split("'")
        Empno = enumber[0].lstrip(' ')
       # Empno = Empno.split('")
def FEG(line) : #Breaks up employee group
    if line.find("Employee Group:") !=-1:
        global Empgro
        epgo = line.split(":")
        epgo = epgo[1].split('"')
        Empgro = (epgo[0].lstrip(' '))
def FDe(line) : #Breaks up department
    if line.find("Department:") !=-1:
        global Depar
        dep = line.split(":")
        dep = dep[1].split('"')
        dep = dep[0].split("'")
        Depar = (dep[0].lstrip(' '))
def FENa(line) : #breaks up employee name
    if line.find("Contractor extension -") != -1:
        global Empnam
        ename = line.split("-")
        ename = ename[1].split("'")
        Empnam = ename[0].lstrip(' ')
def FRD(line) : #gets extend to date
    if line.find("Required: ") != -1:
        global Ldate
        lno = line.split(":")
        lno = lno[1].split("to")
        lno = lno[1].split("'")
        Ldate = lno[0].lstrip(' ')
def FED(line) : #Breaks up sent date
    if line.find("Date:") !=-1:
        global EDate
        eda = line.split(":")
        eda = eda[1].split('"')
        EDate = (eda[0].lstrip(' '))
def FSent() : #Breaks up sent date
    if content.find("From: Mailbox, SD <Service.Desk@news.co.uk>") !=-1:
        global Eset
        eda = content.split("Date:")
        eda = eda[1].split('Subject:')
        Eset = (eda[0].lstrip(' '))
def FCont() : #Breaks up sent date
    if content.find("---------- Forwarded message ----------") !=-1:
        global Econt
        eda = content.split("---------- Forwarded message ----------")
        Econt = (eda[1].lstrip(' '))
def Bget(mtg): #Gets the body of the email
    message = service.users().messages().get(userId='me', id=mtg).execute()
    payld = message['payload'] # get payload of the message
    mssg_parts = payld['parts'] # fetching the message parts
    part_one  = mssg_parts[0] # fetching first element of the part
    part_body = part_one['body'] # fetching body of the message
    part_data = part_body['data'] # fetching data from the body
    clean_one = part_data.replace("-","+") # decoding from Base64 to UTF-8
    clean_one = clean_one.replace("_","/") # decoding from Base64 to UTF-8
    clean_two = base64.b64decode (bytes(clean_one, 'UTF-8')) # decoding from Base64 to UTF-8
    Ebsplit = clean_two.splitlines()
    return Ebsplit
def ListMessagesWithLabels(service, user_id, label_ids=[]):
    try:
        response = service.users().messages().list(userId=user_id,
                                                   labelIds=label_ids).execute()
        messages = []
        if 'messages' in response:
            messages.extend(response['messages'])

        while 'nextPageToken' in response:
            page_token = response['nextPageToken']
            response = service.users().messages().list(userId=user_id,
                                                       labelIds=label_ids,
                                                       pageToken=page_token).execute()
            messages.extend(response['messages'])
            print(response)
        return messages
    except errors.HttpError:
        print('An error occurred')
def Writetosheet(Lines):
    for line in Lines:
        FENo(line)
        FENa(line)
        FRD(line)
        FDe(line)
        FEG(line)
        FED(line)
    FSent()
    FCont()
    #Writes Data to Google sheet
    CRindex = sheet.cell(1, 1, 1).value
    CRindex = CRindex + 1  # Creates Free Row number
    Logdate = datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
    sheet.update_cell(CRindex,1,"PyLog")
    sheet.update_cell(CRindex,3,"PyLog")
    sheet.update_cell(CRindex,4,Empnam)
    sheet.update_cell(CRindex,8,Empno)
    sheet.update_cell(CRindex,9,Ldate)
    sheet.update_cell(CRindex,6,Depar)
    #sheet.update_cell(CRindex,7,Empgro)
    sheet.update_cell(CRindex,7,"Contractor")
    sheet.update_cell(CRindex,10,Logdate)
    sheet.update_cell(CRindex,11,"Yes")

results = service.users().labels().list(userId='me').execute()
labels = results.get('labels', [])
if not labels: #no explination required
    print('No labels found.')
else:
    print('Labels:')
    for label in labels: #finds label
        if (label['name']) == 'Zap/extention': #Chruns out all info in lable
            print(label['id'])
            print(label['name'])
            ebod =(ListMessagesWithLabels(service,'me','Label_36'))
            for Eid in ebod:
                textList = Bget((ebod[x]['id']))
                thefile = open('leaver.txt', 'w')
                for item in textList:
                    thefile.write("%s\n" % item)
                LE = open('leaver.txt', 'r')  # reads temp text file
                content = LE.read()  # turns it to text
                text = content
                Lines = text.splitlines()  # splits txt file into readable lines
                Writetosheet(Lines)

                x = x + 1
